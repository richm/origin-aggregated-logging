apiVersion: "v1"
kind: "Template"
metadata:
  name: logging-support-template-maker
  annotations:
    description: "Template to create template for deploying logging support entities"
    tags: "infrastructure"
parameters:
-
  description: "A shared secret for the authentication proxy oauth client in front of Kibana"
  name: OAUTH_SECRET
  required: true
-
  description: "Hostname at which users will visit Kibana and be authenticated."
  name: KIBANA_HOSTNAME
  required: true
-
  description: "Hostname at which admins will visit the ops Kibana."
  name: KIBANA_OPS_HOSTNAME
  value: kibana-ops.example.com
-
  description: 'Specify prefix for logging component images; e.g. for "openshift/origin-logging-deployment:v1.2", set prefix "openshift/origin-"'
  name: IMAGE_PREFIX_DEFAULT
  value: "docker.io/openshift/origin-"
-
  description: 'Specify version for logging component images; e.g. for "openshift/origin-logging-deployment:v1.2", set version "v1.2"'
  name: IMAGE_VERSION_DEFAULT
  value: "latest"
-
  description: 'Set to "true" if the image registry is not secured with a properly-signed certificate.'
  name: INSECURE_REGISTRY
  value: "false"
-
  description: 'The port the forward listener uses for incoming connections (targetPort: mux-forward).'
  name: FORWARD_LISTEN_PORT
  value: "24284"
objects:
- apiVersion: "v1"
  kind: "Template"
  metadata:
    name: logging-support-template
    annotations:
      description: "Template for deploying logging services, service accounts, and oauthclient."
      tags: "infrastructure"
    labels:
      logging-infra: support
  labels:
    logging-infra: support
    provider: openshift
    component: support
  objects:
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-es"
    spec:
      ports:
      -
        port: 9200
        targetPort: restapi
      selector:
        provider: "openshift"
        component: "es"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-es-cluster"
    spec:
      portalIP: "None"
      ports:
      -
        port: 9300
      selector:
        provider: "openshift"
        component: "es"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-es-ops"
    spec:
      ports:
      -
        port: 9200
        targetPort: restapi
      selector:
        provider: "openshift"
        component: "es-ops"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-es-ops-cluster"
    spec:
      portalIP: "None"
      ports:
      -
        port: 9300
      selector:
        provider: "openshift"
        component: "es-ops"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-kibana"
    spec:
      ports:
        -
          port: 443
          targetPort: "oaproxy"
      selector:
        provider: openshift
        component: "kibana"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-kibana-ops"
    spec:
      ports:
        -
          port: 443
          targetPort: "oaproxy"
      selector:
        provider: openshift
        component: "kibana-ops"
  -
    apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "logging-mux"
    spec:
      ports:
        -
          port: ${FORWARD_LISTEN_PORT}
          targetPort: "mux-forward"
      selector:
        provider: openshift
        component: "mux"
  -
    apiVersion: v1
    kind: OAuthClient
    metadata:
      name: kibana-proxy
    secret: ${OAUTH_SECRET}
    redirectURIs:
    - https://${KIBANA_HOSTNAME}
    - https://${KIBANA_OPS_HOSTNAME}
    scopeRestrictions:
    - literals:
      - user:info
      - user:check-access
      - user:list-projects
- apiVersion: "v1"
  kind: "Template"
  metadata:
    name: logging-imagestream-template
    annotations:
      description: "Template for deploying logging support entities: imagestreams."
      tags: "infrastructure"
    labels:
      logging-infra: support
  labels:
    logging-infra: support
    provider: openshift
    component: support
  parameters:
  -
    description: 'Specify prefix for logging component images; e.g. for "openshift/logging-deployer:v1.2", set prefix "openshift/"'
    name: IMAGE_PREFIX
    value: ${IMAGE_PREFIX_DEFAULT}
  -
    description: 'Specify version for logging component images; e.g. for "openshift/logging-deployer:v1.2", set version "v1.2"'
    name: IMAGE_VERSION
    value: ${IMAGE_VERSION_DEFAULT}
  objects:
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/image.insecureRepository: "${INSECURE_REGISTRY}"
      name: logging-auth-proxy
    spec:
      dockerImageRepository: ${IMAGE_PREFIX}logging-auth-proxy
      tags:
      - name: ${IMAGE_VERSION}
        from:
          kind: DockerImage
          name: ${IMAGE_PREFIX}logging-auth-proxy:${IMAGE_VERSION}
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/image.insecureRepository: "${INSECURE_REGISTRY}"
      name: logging-elasticsearch
    spec:
      dockerImageRepository: ${IMAGE_PREFIX}logging-elasticsearch
      tags:
      - name: ${IMAGE_VERSION}
        from:
          kind: DockerImage
          name: ${IMAGE_PREFIX}logging-elasticsearch:${IMAGE_VERSION}
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/image.insecureRepository: "${INSECURE_REGISTRY}"
      name: logging-fluentd
    spec:
      dockerImageRepository: ${IMAGE_PREFIX}logging-fluentd
      tags:
      - name: ${IMAGE_VERSION}
        from:
          kind: DockerImage
          name: ${IMAGE_PREFIX}logging-fluentd:${IMAGE_VERSION}
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/image.insecureRepository: "${INSECURE_REGISTRY}"
      name: logging-kibana
    spec:
      dockerImageRepository: ${IMAGE_PREFIX}logging-kibana
      tags:
      - name: ${IMAGE_VERSION}
        from:
          kind: DockerImage
          name: ${IMAGE_PREFIX}logging-kibana:${IMAGE_VERSION}
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/image.insecureRepository: "${INSECURE_REGISTRY}"
      name: logging-curator
    spec:
      dockerImageRepository: ${IMAGE_PREFIX}logging-curator
      tags:
      - name: ${IMAGE_VERSION}
        from:
          kind: DockerImage
          name: ${IMAGE_PREFIX}logging-curator:${IMAGE_VERSION}
- apiVersion: "v1"
  kind: "Template"
  parameters:
  -
    description: "The name for the PVC"
    name: NAME
    required: true
  -
    description: "The size for the PVC"
    name: SIZE
    required: true
  metadata:
    name: logging-pvc-template
    annotations:
      description: "Template for deploying logging support entities: persistentvolumeclaims."
      tags: "infrastructure"
    labels:
      logging-infra: support
  labels:
    logging-infra: support
    provider: openshift
    component: support
  objects:
  -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${SIZE}
- apiVersion: "v1"
  kind: "Template"
  parameters:
  -
    description: "The name for the PVC"
    name: NAME
    required: true
  -
    description: "The size for the PVC"
    name: SIZE
    required: true
  metadata:
    name: logging-pvc-dynamic-template
    annotations:
      description: "Template for deploying logging support entities: dynamically provisioned persistentvolumeclaims."
      tags: "infrastructure"
    note: "The only difference is the annotation. Only the name of the annotation matters; the value is ignored. Since templates can only fill in values, a separate template was needed to make the annotation optional."
    labels:
      logging-infra: support
  labels:
    logging-infra: support
    provider: openshift
    component: support
  objects:
  -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${NAME}
      annotations:
        volume.alpha.kubernetes.io/storage-class: "dynamic"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${SIZE}
